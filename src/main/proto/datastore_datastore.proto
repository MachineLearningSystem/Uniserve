syntax = "proto3";

option java_multiple_files = true;
option java_package = "edu.stanford.futuredata.uniserve";
option java_outer_classname = "DatastoreDatastoreProto";

package datastoredatastore;

// Communication between datastores.
service DataStoreDataStore {
    // Notify the primary a replica must be updated to the latest version.
    rpc BootstrapReplica (BootstrapReplicaMessage) returns (BootstrapReplicaResponse) {}
    // Write to a replica.
    rpc ReplicaWrite (stream ReplicaWriteMessage) returns (stream ReplicaWriteResponse) {}
    // DataStorePing a datastore to see if it's alive.
    rpc DataStorePing (DataStorePingMessage) returns (DataStorePingResponse) {}
    // Register a materialized view on a replica.
    rpc ReplicaRegisterMV (ReplicaRegisterMVMessage) returns (ReplicaRegisterMVResponse) {}
    // Get data for a shuffle.
    rpc GetShuffleData (GetShuffleDataMessage) returns (GetShuffleDataResponse) {}
}

message ReplicaWriteMessage {
    int32 shard = 1;
    bytes serializedQuery = 2;
    bytes rowData = 3;
    int32 versionNumber = 4;
    int32 writeState = 5;
    int64 txID = 6;
}

message ReplicaWriteResponse {
    int32 returnCode = 1;
}

message BootstrapReplicaMessage {
    int32 shard = 1;
    int32 versionNumber = 2;
    int32 dsID = 3;
}

message BootstrapReplicaResponse {
    int32 returnCode = 1;
    int32 versionNumber = 2;
    bytes writeQueries = 3;
    bytes writeData = 4;
}

message DataStorePingMessage {}

message DataStorePingResponse {}

message ReplicaRegisterMVMessage {
    int32 shard = 1;
    bytes serializedQuery = 2;
    string name = 3;
}

message ReplicaRegisterMVResponse {
    int32 returnCode = 1;
}

message GetShuffleDataMessage {
    int32 shardNum = 1;
    string columnName = 2;
    int32 bucketNum = 3;
    int32 numBuckets = 4;
}

message GetShuffleDataResponse {
    int32 returnCode = 1;
    bytes shuffleData = 2;
}
