syntax = "proto3";

option java_multiple_files = true;
option java_package = "edu.stanford.futuredata.uniserve";
option java_outer_classname = "DatastoreDatastoreProto";

package datastoredatastore;

// Communication between datastores.
service DataStoreDataStore {
    // Notify the primary a replica must be updated to the latest version.
    rpc BootstrapReplica (BootstrapReplicaMessage) returns (BootstrapReplicaResponse) {}
    // Notify the primary a replica is being removed.
    rpc NotifyReplicaRemoved (NotifyReplicaRemovedMessage) returns (NotifyReplicaRemovedResponse) {}
    // 2PC-style prepare commit on the replica.
    rpc ReplicaPreCommit (stream ReplicaPreCommitMessage) returns (ReplicaPreCommitResponse) {}
    // Commit or abort the write query.
    rpc ReplicaCommit (ReplicaCommitMessage) returns (ReplicaCommitResponse) {}
    // DataStorePing a datastore to see if it's alive.
    rpc DataStorePing (DataStorePingMessage) returns (DataStorePingResponse) {}
}

message ReplicaPreCommitMessage {
    int32 shard = 1;
    bytes serializedQuery = 2;
    bytes rowData = 3;
    int64 txID = 4;
    int32 versionNumber = 5;
}

message ReplicaPreCommitResponse {
    int32 returnCode = 1;
}

message ReplicaCommitMessage {
    int32 shard = 1;
    bool commitOrAbort = 2; // Commit on true, abort on false
    int64 txID = 3;
}

message ReplicaCommitResponse {}

message BootstrapReplicaMessage {
    int32 shard = 1;
    int32 versionNumber = 2;
    int32 dsID = 3;
}

message BootstrapReplicaResponse {
    int32 returnCode = 1;
    int32 versionNumber = 2;
    bytes writeQueries = 3;
    bytes writeData = 4;
}

message DataStorePingMessage {}

message DataStorePingResponse {}

message NotifyReplicaRemovedMessage {
    int32 shard = 1;
    int32 dsID = 2;
}

message NotifyReplicaRemovedResponse {}
